import { Repository, GeneratedReadme } from '../types';

export class GeminiService {
  private apiKey: string;
  
  constructor() {
    this.apiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('Gemini API key not found. Please add VITE_GEMINI_API_KEY to your environment variables.');
    }
  }

  async generateReadme(repository: Repository): Promise<GeneratedReadme> {
    const prompt = this.buildPrompt(repository);
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 6000,
        }
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(`Gemini API error: ${error.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
    
    if (!content) {
      throw new Error('No content generated by Gemini API');
    }

    return {
      content,
      sections: this.extractSections(content)
    };
  }

  private buildPrompt(repository: Repository): string {
    // Find logo files
    const logoFiles = repository.files.filter(file => 
      file.type === 'file' && (
        file.name.toLowerCase().includes('logo') ||
        file.name.toLowerCase().includes('icon') ||
        file.name.toLowerCase().includes('brand') ||
        file.path.toLowerCase().includes('logo') ||
        file.path.toLowerCase().includes('icon')
      ) && (
        file.name.endsWith('.png') ||
        file.name.endsWith('.svg') ||
        file.name.endsWith('.jpg') ||
        file.name.endsWith('.jpeg')
      )
    );

    const logoInfo = logoFiles.length > 0 
      ? `\nAvailable Logo Files:\n${logoFiles.map(f => `- ${f.path}`).join('\n')}`
      : '';

    const fileContents = repository.files
      .filter(file => file.content && file.type === 'file')
      .map(file => `File: ${file.path}\n${file.content}`)
      .join('\n\n---\n\n');

    const techStack = this.detectTechStack(repository);
    const projectType = this.detectProjectType(repository);

    return `
Analyze this GitHub repository and generate a STUNNING, PROFESSIONAL README.md file that stands out and looks absolutely amazing.

Repository Information:
- Name: ${repository.name}
- Description: ${repository.description}
- Language: ${repository.language}
- Owner: ${repository.owner}
- Stars: ${repository.stars}
- Forks: ${repository.forks}
- Detected Tech Stack: ${techStack}
- Project Type: ${projectType}${logoInfo}

IMPORTANT: Create a README that follows modern design principles and looks absolutely stunning!

File Contents:
${fileContents}

Generate a README.md that follows this STUNNING DESIGN TEMPLATE:

## HEADER SECTION (Make it absolutely beautiful):
${logoFiles.length > 0 ? `- Use the detected logo: ![Logo](${logoFiles[0].path})` : '- Create a beautiful ASCII art title or use emojis'}
- Add an eye-catching project title with emojis
- Include a compelling tagline/description
- Add relevant badges in a beautiful layout (build status, version, license, etc.)
- Include social proof (stars, forks, contributors)

## VISUAL ELEMENTS:
- Use beautiful dividers and spacing
- Add emojis strategically throughout
- Create visually appealing tables
- Use blockquotes for important information
- Add beautiful code blocks with proper syntax highlighting

## CONTENT STRUCTURE (Make each section outstanding):

### 🚀 **Features** (with beautiful formatting)
- List key features with emojis and descriptions
- Use checkboxes for feature lists
- Make it visually appealing

### 📦 **Installation** (crystal clear steps)
- Beautiful step-by-step installation guide
- Include prerequisites
- Add copy-paste ready commands
- Use proper code blocks with language tags

### 🎯 **Quick Start** (get users running fast)
- Simple, clear usage examples
- Include common use cases
- Add screenshots placeholders

### 🛠️ **Configuration** (if applicable)
- Environment variables
- Configuration files
- Setup options

### 📚 **Documentation** (comprehensive guides)
- API documentation if applicable
- Advanced usage
- Examples and tutorials

### 🤝 **Contributing** (encourage participation)
- Contribution guidelines
- Development setup
- Code of conduct

### 📄 **License** (clear licensing)
- License information
- Copyright details

### 🙏 **Acknowledgments** (give credit)
- Contributors
- Inspiration
- Third-party libraries

## DESIGN REQUIREMENTS:
1. **Visual Appeal**: Use emojis, beautiful formatting, and clear sections
2. **Professional Layout**: Clean, organized, and easy to scan
3. **Modern Badges**: Include relevant shields.io badges
4. **Code Quality**: Proper syntax highlighting and formatting
5. **User-Friendly**: Clear instructions and examples
6. **Comprehensive**: Cover all aspects of the project
7. **Engaging**: Make people want to use and contribute
8. **Mobile-Friendly**: Looks great on all devices

Create a README that developers will be impressed by and want to star the repository immediately!
    `;
  }

  private detectTechStack(repository: Repository): string {
    const techStack: string[] = [];
    
    // Check package.json for JavaScript/Node.js
    const packageJson = repository.files.find(f => f.name === 'package.json');
    if (packageJson?.content) {
      try {
        const pkg = JSON.parse(packageJson.content);
        if (pkg.dependencies || pkg.devDependencies) {
          const deps = { ...pkg.dependencies, ...pkg.devDependencies };
          if (deps.react) techStack.push('React');
          if (deps.vue) techStack.push('Vue.js');
          if (deps.angular) techStack.push('Angular');
          if (deps.next) techStack.push('Next.js');
          if (deps.nuxt) techStack.push('Nuxt.js');
          if (deps.express) techStack.push('Express.js');
          if (deps.typescript) techStack.push('TypeScript');
          if (deps.tailwindcss) techStack.push('Tailwind CSS');
          if (deps.sass || deps.scss) techStack.push('Sass');
        }
      } catch (e) {
        // Ignore JSON parse errors
      }
    }
    
    // Check for other tech stacks
    if (repository.files.some(f => f.name === 'requirements.txt' || f.name === 'setup.py')) {
      techStack.push('Python');
    }
    if (repository.files.some(f => f.name === 'Cargo.toml')) {
      techStack.push('Rust');
    }
    if (repository.files.some(f => f.name === 'go.mod')) {
      techStack.push('Go');
    }
    if (repository.files.some(f => f.name === 'pom.xml')) {
      techStack.push('Java');
    }
    if (repository.files.some(f => f.name === 'Gemfile')) {
      techStack.push('Ruby');
    }
    if (repository.files.some(f => f.name === 'composer.json')) {
      techStack.push('PHP');
    }
    
    return techStack.length > 0 ? techStack.join(', ') : repository.language || 'Unknown';
  }

  private detectProjectType(repository: Repository): string {
    const files = repository.files.map(f => f.name.toLowerCase());
    
    if (files.includes('package.json')) {
      const packageJson = repository.files.find(f => f.name === 'package.json');
      if (packageJson?.content) {
        try {
          const pkg = JSON.parse(packageJson.content);
          const deps = { ...pkg.dependencies, ...pkg.devDependencies };
          
          if (deps.react || deps.vue || deps.angular) return 'Frontend Application';
          if (deps.express || deps.fastify || deps.koa) return 'Backend API';
          if (deps.next || deps.nuxt || deps.gatsby) return 'Full-Stack Application';
          if (pkg.bin || deps.commander || deps.yargs) return 'CLI Tool';
        } catch (e) {
          // Ignore JSON parse errors
        }
      }
      return 'JavaScript/Node.js Project';
    }
    
    if (files.includes('requirements.txt') || files.includes('setup.py')) {
      return 'Python Application';
    }
    if (files.includes('cargo.toml')) {
      return 'Rust Application';
    }
    if (files.includes('go.mod')) {
      return 'Go Application';
    }
    if (files.includes('dockerfile')) {
      return 'Containerized Application';
    }
    
    return 'Software Project';
  }

  private extractSections(content: string): string[] {
    const sections: string[] = [];
    const lines = content.split('\n');
    
    for (const line of lines) {
      if (line.startsWith('# ') || line.startsWith('## ')) {
        sections.push(line.replace(/^#+\s*/, ''));
      }
    }
    
    return sections;
  }
}